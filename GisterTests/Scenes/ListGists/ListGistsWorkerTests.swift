//
//  ListGistsWorkerTests.swift
//  Gister
//
//  Created by Raymond Law on 10/12/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Gister
import XCTest

class ListGistsWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ListGistsWorker!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupListGistsWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListGistsWorker()
  {
    sut = ListGistsWorker()
  }
  
  // MARK: Test doubles
  
  class GistAPISpy: GistAPIProtocol
  {
    let gists = [Seeds.Gists.text, Seeds.Gists.html]
    
    var fetchWithCompletionHandlerCalled = false
    var fetchWithDelegateCalled = false
    var delegate: GistAPIDelegate?
    
    func fetch(completionHandler: @escaping ([Gist]) -> Void)
    {
      fetchWithCompletionHandlerCalled = true
      DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) {
        completionHandler(self.gists)
      }
    }
    
    func fetch()
    {
      fetchWithDelegateCalled = true
    }
  }
  
  class ListGistsWorkerDelegateSpy: ListGistsWorkerDelegate
  {
    var listGistsWorkerDidFetchGistsCalled = false
    var listGistsWorkerDidFetchGistsResults = [Gist]()
    
    func listGistsWorker(listGistsWorker: ListGistsWorker, didFetchGists gists: [Gist])
    {
      listGistsWorkerDidFetchGistsCalled = true
      listGistsWorkerDidFetchGistsResults = gists
    }
  }
  
  // MARK: Tests
  
  // MARK: Block implementation
  
  func testFetchShouldAskGistAPIToFetchGistsWithBlock()
  {
    // Given
    let gistAPISpy = GistAPISpy()
    sut.gistAPI = gistAPISpy
    
    // When
    sut.fetch { (gists) in }
    
    // Then
    XCTAssertTrue(gistAPISpy.fetchWithCompletionHandlerCalled, "fetch(completionHandler:) should ask Gist API to fetch gists")
  }
  
  func testFetchShouldReturnGistsResultsToBlock()
  {
    // Given
    let gistAPISpy = GistAPISpy()
    sut.gistAPI = gistAPISpy
    
    // When
    var actualGists: [Gist]?
    let fetchCompleted = expectation(description: "Wait for fetch to complete")
    sut.fetch { (gists) in
      actualGists = gists
      fetchCompleted.fulfill()
    }
    waitForExpectations(timeout: 5.0, handler: nil)
    
    // Then
    let expectedGists = gistAPISpy.gists
    XCTAssertEqual(actualGists!, expectedGists, "fetch(completionHandler:) should return an array of gists to completion block if the fetch succeeds")
  }
  
  // MARK: Delegate implementation
  
  func testFetchShouldAskGistAPIToFetchGistsWithDelegate()
  {
    // Given
    let gistAPISpy = GistAPISpy()
    sut.gistAPI = gistAPISpy
    
    // When
    sut.fetch()
    
    // Then
    XCTAssertTrue(gistAPISpy.fetchWithDelegateCalled, "fetch(completionHandler:) should ask Gist API to fetch gists")
  }
  
  func testGistAPIDidFetchGistsShouldNotifyDelegateWithGistsResults()
  {
    // Given
    let gistAPISpy = GistAPISpy()
    sut.gistAPI = gistAPISpy
    let listGistsWorkerDelegateSpy = ListGistsWorkerDelegateSpy()
    sut.delegate = listGistsWorkerDelegateSpy
    
    // When
    let gists = [Seeds.Gists.text, Seeds.Gists.html]
    sut.gistAPI(gistAPI: gistAPISpy, didFetchGists: gists)
    
    // Then
    let expectedGists = gistAPISpy.gists
    let actualGists = listGistsWorkerDelegateSpy.listGistsWorkerDidFetchGistsResults
    XCTAssertTrue(listGistsWorkerDelegateSpy.listGistsWorkerDidFetchGistsCalled, "fetch(completionHandler:) should notify its delegate")
    XCTAssertEqual(actualGists, expectedGists, "fetch(completionHandler:) should return an array of gists if the fetch succeeds")
  }
}

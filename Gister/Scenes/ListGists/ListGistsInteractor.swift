//
//  ListGistsInteractor.swift
//  Gister
//
//  Created by Raymond Law on 10/12/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListGistsBusinessLogic
{
  func fetchGists(request: ListGists.FetchGists.Request)
}

protocol ListGistsDataStore
{
}

class ListGistsInteractor: ListGistsBusinessLogic, ListGistsDataStore, ListGistsWorkerDelegate
{
  var presenter: ListGistsPresentationLogic?
  var listGistsWorker = ListGistsWorker()
  
  enum AsyncOpKind {
    case block, delegate
  }
  var asyncOpKind = AsyncOpKind.block
  
  // MARK: Fetch Gists
  
  func fetchGists(request: ListGists.FetchGists.Request)
  {
    switch asyncOpKind
    {
    case .block:
      // MARK: Block implementation
      listGistsWorker.fetch { (gists) in
        let response = ListGists.FetchGists.Response(gists: gists)
        self.presenter?.presentFetchedGists(response: response)
      }
    case .delegate:
      // MARK: Delegate method implementation
      listGistsWorker.delegate = self
      listGistsWorker.fetch()
    }
  }
  
  func listGistsWorker(listGistsWorker: ListGistsWorker, didFetchGists gists: [Gist])
  {
    let response = ListGists.FetchGists.Response(gists: gists)
    presenter?.presentFetchedGists(response: response)
  }
}

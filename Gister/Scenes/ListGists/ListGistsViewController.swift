//
//  ListGistsViewController.swift
//  Gister
//
//  Created by Raymond Law on 10/12/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListGistsDisplayLogic: class
{
  func displayFetchedGists(viewModel: ListGists.FetchGists.ViewModel)
}

class ListGistsViewController: UITableViewController, ListGistsDisplayLogic
{
  var interactor: ListGistsBusinessLogic?
  var router: (NSObjectProtocol & ListGistsRoutingLogic & ListGistsDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListGistsInteractor()
    let presenter = ListGistsPresenter()
    let router = ListGistsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchGists()
  }
  
  // MARK: Table view
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return displayedGists.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let displayedGist = displayedGists[indexPath.row]
    var cell = tableView.dequeueReusableCell(withIdentifier: "GistCell")
    if cell == nil {
      cell = UITableViewCell(style: .value1, reuseIdentifier: "GistCell")
    }
    cell?.textLabel?.text = displayedGist.login
    cell?.detailTextLabel?.text = displayedGist.filetype
    return cell!
  }
  
  // MARK: Fetch Gists
  
  var displayedGists: [ListGists.FetchGists.ViewModel.DisplayedGist] = []
  
  @IBAction func refreshButtonTapped(_ sender: Any)
  {
    fetchGists()
  }
  
  func fetchGists()
  {
    let request = ListGists.FetchGists.Request()
    interactor?.fetchGists(request: request)
  }
  
  func displayFetchedGists(viewModel: ListGists.FetchGists.ViewModel)
  {
    displayedGists = viewModel.displayedGists
    tableView.reloadData()
  }
}
